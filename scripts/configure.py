#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Monitor configurator
# date: 19.05.09
# author: sikmir
# requirement: python >= 2.6

import Tkinter
from Tkinter import *
from conf_tab import *
import string, os, traceback
import tkSimpleDialog
import re
import json
import shutil

root = None
frame = { "0" : 0 }
menu = None
tabs = { "0" : 0 }
build_var = { "0": 0 }
level_var = { "0" : 0 }
common_var = { "0": 0 }
shell_inc, tests_inc, subdirs, tests_table_inc = (None, None, None, None)

def read_config(fileconf):
	""" Read config file """
        global shell_inc, tests_inc, subdirs, tests_table_inc
        global menu, tabs
        with open(fileconf, 'r') as conf:
                config = conf.read()
                json_conf = json.loads(config)
                menu = json_conf['Menu']
                for tab in menu:
            		tabs[str(tab)] = json_conf[str(tab)]
            	#-- Files for generate
                shell_inc = json_conf['shell_inc']
                tests_inc = json_conf['tests_inc']
                subdirs = json_conf['subdirs']
                tests_table_inc = json_conf['tests_table_inc']
        conf.close()

def write_config(fileconf):
	""" Write config file """
	global build_var, common_var, level_var
        global shell_inc, tests_inc, subdirs, tests_table_inc
        with open(fileconf, 'w+') as conf:
                tmp = {'shell_inc' : "src/conio/shell.inc", 'tests_inc' : "src/conio/tests.inc", \
                        'subdirs' : "src/tests/subdirs", 'tests_table_inc' : "src/tests/tests_table.inc" }
		tmp['Menu'] = menu
		for i in range( len(menu) ):
			tmp[menu[i]] = tabs[menu[i]]
                #-- Common
                tmp["Common"]["Compiler"] = common_var["Compiler"].get()
                tmp["Common"]["Target"] = common_var["Target"].get()
                tmp["Common"]["Cflags"] = common_var["Cflags"].get()
                tmp["Common"]["Ldflags"] = common_var["Ldflags"].get()
                tmp["Common"]["Arch_num"] = common_var["Arch_num"].get()
                #-- Levels
                tmp["Levels"]["Error"] = level_var["Error"].get()
                tmp["Levels"]["Trace"] = level_var["Trace"].get()
                tmp["Levels"]["Warn"] = level_var["Warn"].get()
                tmp["Levels"]["Debug"] = level_var["Debug"].get()
                tmp["Levels"]["Test_system"] = level_var["Test_system"].get()
                tmp["Levels"]["Leon3"] = level_var["Leon3"].get()
                #-- Build
                tmp["Build"]["Debug"] = build_var["Debug"].get()
                tmp["Build"]["Release"] = build_var["Release"].get()
                tmp["Build"]["Simulation"] = build_var["Simulation"].get()
                tmp["Build"]["Doxygen"] = build_var["Doxygen"].get()
                tmp["Build"]["Disassemble"] = build_var["Disassemble"].get()
                conf.write(json.dumps(tmp))
        conf.close()

def reload_config(fileconf):
        """ Reload config """
	pass
#	read_config(fileconf)
	#TODO:

def onPress(ar, i, j):
	ar[i][j] = not ar[i][j]

def getStatus(i):
	if i == 1:
		return "normal"
	if i == 0:
		return "disabled"

def make_conf():
	build_commands()
	build_makefile()
	build_tests()
	build_drivers()
	write_config("config")

def build_commands():
	#-- generate src/conio/shell.inc
	with open(shell_inc, 'w+') as fshell:
		fshell.write("//Don't edit! shell.inc: auto-generated by configure.py\n\n")
		for test, pack, inc, status, desc in tabs['Commands']:
			if inc == True:
				if test != "wmem":
					fshell.write("{\"" + test + "\", \"" + desc + "\", " + test + "_shell_handler},\n")
				else:
					fshell.write("{\"" + test + "\", \"" + desc + "\", " + test + "_shell_handler}\n")
	fshell.close()
	#-- generate src/conio/tests.inc
	with open(tests_inc, 'w+') as ftest_include:
		ftest_include.write("//Don't edit! test.inc: auto-generated by configure.py\n\n")
		for test, pack, inc, status, desc in tabs['Commands']:
			if inc == True:
				if test != "arp":
					ftest_include.write("#include \"" + test + ".h\"\n")
				else:
					ftest_include.write("#include \"" + test + "c.h\"\n")
	ftest_include.close()
	#-- generate src/tests/subdirs
	with open(subdirs, 'w+') as fsubdirs:
		fsubdirs.write("SUBDIRS:= \\\n")
		for test, pack, inc, status, desc in tabs['Commands']:
			if inc == True:
				if pack != "wmem":
					fsubdirs.write(str(pack) + " \\\n")
				else:
					fsubdirs.write(str(pack) + " \n")
	fsubdirs.close()

def repl_arch(m):
	return "CPU_ARCH:= " + tabs['Common']['Arch'][common_var["Arch_num"].get()][0]

def repl_compil(m):
	return "CC_PACKET:= " + common_var["Compiler"].get()

def repl_target(m):
	return "TARGET:= " + common_var["Target"].get()

def repl_all(m):
	repl = "all: "
	if build_var["Debug"].get() == 1:
		repl += "debug "
	if build_var["Release"].get() == 1:
		repl += "release "
	if build_var["Simulation"].get() == 1:
		repl += "simulation "
	if build_var["Doxygen"].get() == 1:
		repl += "docs "
	return repl

def repl_cflag(m):
	repl = "CCFLAGS:= " + common_var["Cflags"].get()
	if level_var["Leon3"].get() == 1:
		repl += " -DLEON3"
	if level_var["Test_system"].get() == 1:
		repl += " -D_TEST_SYSTEM_"
	if level_var["Error"].get() == 1:
		repl += " -D_ERROR"
	if level_var["Trace"].get() == 1:
		repl += " -D_TRACE"
	if level_var["Warn"].get() == 1:
		repl += " -D_WARN"
	if level_var["Debug"].get() == 1:
		repl += " -D_DEBUG"
	return repl

def repl_ldflag(m):
        repl = "LDFLAGS:= " + common_var["Ldflags"].get()
        return repl

def build_makefile():
	#-- generate makefile
	with open('makefile', 'r+') as fmk:
		content = fmk.read()
	fmk.close()
	content = re.sub('CPU_ARCH:= (\w+)', repl_arch, content)
	content = re.sub('CC_PACKET:= (\w+(-\w+)?)', repl_compil, content)
	content = re.sub('TARGET:= (\w+)', repl_target, content)
	content = re.sub('CCFLAGS:= ([A-Za-z0-9_\-# ]+)', repl_cflag, content)
	content = re.sub('LDFLAGS:= ([A-Za-z0-9_\-# ]+)', repl_ldflag, content)
	with open('makefile', 'w+') as fmk:
		fmk.write(content)
	fmk.close()
	#-- generate src/makefile
	with open('src/makefile', 'r+') as fmk:
		content = fmk.read()
	fmk.close()
	content = re.sub('all: ([a-z ]+)', repl_all, content)
	with open('src/makefile', 'w+') as fmk:
		fmk.write(content)
	fmk.close()

def build_tests():
	#-- generate src/tests/tests_table.inc
	with open(tests_table_inc, 'w+') as ftest:
		ftest.write("//Don't edit! shell.inc: auto-generated by configure.py\n\n")
		for test, inc, status, desc in tabs['Tests']:
			if inc == True:
				ftest.write("{\"" + desc + "\", " + test + "},\n")
		ftest.write("{\"empty\", NULL}\n")
	ftest.close()

def build_drivers():
	pass

#-----------------------------GUI------------------------------
def About():
	view_window = Tkinter.Toplevel(root)
	about_text = "Monitor configurator\nAuthor: Nikolay Korotky\n2009"
	Tkinter.Label(view_window,  text=about_text).pack()
	Tkinter.Button(view_window, text='OK', command=view_window.destroy).pack()
        view_window.focus_set()
        view_window.grab_set()
        view_window.wait_window()

def file_menu():
	file_btn = Tkinter.Menubutton(frame["Menu"], text='File', underline=0)
	file_btn.pack(side=Tkinter.LEFT, padx="2m")
	file_btn.menu = Tkinter.Menu(file_btn)
	file_btn.menu.add_command(label="Save", underline=0, command=make_conf)
	file_btn.menu.add_command(label="Load default", underline=0, command=reload_config("config.default"))
	file_btn.menu.add('separator')
	file_btn.menu.add_command(label='Exit', underline=0, command=file_btn.quit)
	file_btn['menu'] = file_btn.menu
	return file_btn

def help_menu():
	help_btn = Tkinter.Menubutton(frame["Menu"], text='Help', underline=0,)
	help_btn.pack(side=Tkinter.LEFT, padx="2m")
	help_btn.menu = Tkinter.Menu(help_btn)
	help_btn.menu.add_command(label="About", underline=0, command=About)
	help_btn['menu'] = help_btn.menu
	return help_btn

def main():
	global root
	root = Tkinter.Tk()
	root.title(tabs['Common']['Title'])

	#-- Create the menu frame, and add menus to the menu frame
	frame["Menu"] = Tkinter.Frame(root)
	frame["Menu"].pack(fill=Tkinter.X, side=Tkinter.TOP)
	frame["Menu"].tk_menuBar(file_menu(), help_menu())

	#-- Create the info frame and fill with initial contents
	frame["Info"] = Tkinter.Frame(root)
	frame["Info"].pack(fill=Tkinter.X, side=Tkinter.BOTTOM, pady=1)

	#-- Tabs frame
	frame["Main"] = conf_tab(frame["Info"], LEFT)

	#-- Common frame
	frame["Common"] = Tkinter.Frame(frame["Main"]())
	Label(frame["Common"], text=tabs['Common']['Title'], width=25, background="green").grid(row=0, column=0)
	Label(frame["Common"], text="", width=35, background="green").grid(row=0, column=1)
	Label(frame["Common"], text="Программа предназначенная для началь-", width=35).grid(row=1, column=1)
	Label(frame["Common"], text="ной инициализации и тестирования ап-", width=35).grid(row=2, column=1)
	Label(frame["Common"], text="паратуры. А так же для ее отладки. А", width=35).grid(row=3, column=1)
	Label(frame["Common"], text="так же для отладки системного кода для", width=35).grid(row=4, column=1)
	Label(frame["Common"], text=" дальнейшего переноса кода в Линукс ", width=35).grid(row=5, column=1)
	global common_var
	#-- Arch subframe
	common_var["Arch_num"] = IntVar()
	Label(frame["Common"], text="Arch", width=25, background="lightblue").grid(row=1, column=0)
	for ar, value in tabs['Common']['Arch']:
		Radiobutton(frame["Common"], text=ar, value=value, variable=common_var["Arch_num"], anchor=W).grid(row=value+2, column=0, sticky=W)
	common_var["Arch_num"].set(tabs["Common"]["Arch_num"])
	#-- Compiler subframe
	Label(frame["Common"], text="Compiler", width=25, background="lightblue").grid(row=5, column=0)
	common_var["Compiler"] = StringVar()
	Entry(frame["Common"], width=25, textvariable=common_var["Compiler"]).grid(row=6, column=0)
	common_var["Compiler"].set(tabs["Common"]["Compiler"])
	#-- LDFLAGS subframe
	Label(frame["Common"], text="LDFLAGS", width=25, background="lightblue").grid(row=7, column=0)
	common_var["Ldflags"] = StringVar()
	Entry(frame["Common"], width=25, textvariable=common_var["Ldflags"]).grid(row=8, column=0)
	common_var["Ldflags"].set(tabs["Common"]["Ldflags"])
	#-- CFLAGS subframe
	Label(frame["Common"], text="CFLAGS", width=25, background="lightblue").grid(row=9, column=0)
	common_var["Cflags"] = StringVar()
	Entry(frame["Common"], width=25, textvariable=common_var["Cflags"]).grid(row=10, column=0)
	common_var["Cflags"].set(tabs["Common"]["Cflags"])
	#-- Target subframe
	Label(frame["Common"], text="Target", width=25, background="lightblue").grid(row=11, column=0)
	common_var["Target"] = StringVar()
	Entry(frame["Common"], width=25, textvariable=common_var["Target"]).grid(row=12, column=0)
	common_var["Target"].set(tabs["Common"]["Target"])

	#-- Drivers frame
	frame[menu[1]] = Tkinter.Frame(frame["Main"]())
	Label(frame[menu[1]], text=menu[1], width=25, background="lightblue").grid(row=0, column=0)
	Label(frame[menu[1]], text="Description", width=35, background="lightblue").grid(row=0, column=1)
	vard = IntVar()
	row = 1
	for driver, inc, status, desc in tabs[menu[1]]:
		setattr(vard, driver, IntVar())
		Checkbutton(frame[menu[1]], text=driver, state=getStatus(status), anchor=W, variable = getattr(vard, driver), \
			    command=(lambda row=row: onPress(tabs[menu[1]], row-1, 1))).grid(row=row, column=0, sticky=W)
		getattr(vard, driver).set(inc)
		Label(frame[menu[1]], text=desc, state=getStatus(status), width=35, anchor=W).grid(row=row, column=1, sticky=W)
		row = row + 1

	#-- Tests frame
	frame[menu[2]] = Tkinter.Frame(frame["Main"]())
	Label(frame[menu[2]], text=menu[2], width=25, background="lightblue").grid(row=0, column=0)
	Label(frame[menu[2]], text="Description", width=35, background="lightblue").grid(row=0, column=1)
	vart = IntVar()
	row = 1
	for test_name, inc, status, desc in tabs[menu[2]]:
		setattr(vart, test_name, IntVar())
		Checkbutton(frame[menu[2]], text=test_name, state=getStatus(status), anchor=W, variable = getattr(vart, test_name), \
			    command=(lambda row=row: onPress(tabs[menu[2]], row-1, 1))).grid(row=row, column=0, sticky=W)
		getattr(vart, test_name).set(inc)
		Label(frame[menu[2]], text=desc, state=getStatus(status), width=35, anchor=W).grid(row=row, column=1, sticky=W)
		row = row + 1

	#-- Commands frame
	frame[menu[3]] = Tkinter.Frame(frame["Main"]())
	Label(frame[menu[3]], text=menu[3], width=25, background="lightblue").grid(row=0, column=0)
        Label(frame[menu[3]], text="Description", width=35, background="lightblue").grid(row=0, column=1)
        varc = IntVar()
	row = 1
	for cmd, pack, inc, status, desc in tabs[menu[3]]:
		setattr(varc, cmd, IntVar())
    		Checkbutton(frame[menu[3]], text=cmd, state=getStatus(status), anchor=W, variable = getattr(varc, cmd), \
    			    command=(lambda row=row: onPress(tabs[menu[3]], row-1, 2))).grid(row=row, column=0, sticky=W)
		getattr(varc, cmd).set(inc)
		Label(frame[menu[3]], text=desc, state=getStatus(status), width=35, anchor=W).grid(row=row, column=1, sticky=W)
		row = row + 1

	#-- Level frame
	global level_var
	frame[menu[4]] = Tkinter.Frame(frame["Main"]())
	Label(frame[menu[4]], text="Verbous level", width=25, background="lightblue").grid(row=0, column=0)
	Label(frame[menu[4]], text="", width=35).grid(row=0, column=1)
	for i in range( len(tabs[menu[4]].keys()) ):
		name = str(tabs[menu[4]].keys()[i])
		level_var[name] = IntVar()
		Checkbutton(frame[menu[4]], text=tabs[menu[4]].keys()[i], state=NORMAL, anchor=W, \
			    variable = level_var[name]).grid(row=i+1, column=0, sticky=W)
		level_var[name].set(tabs[menu[4]][name])

	#-- Build frame
	global build_var
	frame[menu[5]] = Tkinter.Frame(frame["Main"]())
	Label(frame[menu[5]], text=menu[5], width=25, background="lightblue").grid(row=0, column=0)
	Label(frame[menu[5]], text="", width=35).grid(row=0, column=1)
	for i in range( len(tabs[menu[5]].keys()) ):
		name = str(tabs[menu[5]].keys()[i])
		build_var[name] = IntVar()
		Checkbutton(frame[menu[5]], text=tabs[menu[5]].keys()[i], state=NORMAL, anchor=W, \
			variable = build_var[name]).grid(row=i+1, column=0, sticky=W)
		build_var[name].set(tabs[menu[5]][name])

	#-- build tabs
	for i in range( len(menu) ):
		frame["Main"].add_screen(frame[str(menu[i])], str(menu[i]))

	root.mainloop()

if __name__=='__main__':
	try:
		read_config("config")
		shutil.copyfile("config", "config.old")
    		main()
	except:
    		traceback.print_exc()
