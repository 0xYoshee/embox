/**
 * @file
 * @brief C++ forwarding header
 * @date 05.07.12
 * @author Ilia Vaprol
 */

#ifndef CMATH_
#define CMATH_

#include <math.h>

#undef isnan
#undef isfinite
#undef isinf
#undef isnormal
#undef signbit
#undef isgreater
#undef isless
#undef isgreaterequal
#undef islessequal
#undef islessgreater
#undef isunordered
#undef fpclassify

#define FP_NAN         0
#define FP_INFINITE    1
#define FP_NORMAL      2
#define FP_SUBNORMAL   3
#define FP_ZERO        4

namespace std {
	using ::floor;
	using ::pow;
	using ::ceil;
	using ::acos;
	using ::fmod;
	using ::modf;
	using ::asin;
	using ::frexp;
	using ::atan;
	using ::ldexp;
	using ::atan2;
	using ::fabs;
	using ::cos;
	using ::sin;
	using ::tan;
	using ::cosh;
	using ::tanh;
	using ::exp;
	using ::log;
	using ::sinh;
	using ::log10;
	using ::sqrt;

	static inline float floor(float x) {
		return floorf(x);
	}

	static inline float abs(float x) {
		return fabs(x);
	}

	static inline double abs(double x) {
		if (x < 0) {
			return -x;
		}

		return x;
	}

	static inline long long int abs(long long int x) {
		if (x < 0) {
			return -x;
		}

		return x;
	}

	static inline long double floor(long double x) {
		return floorl(x);
	}

	static inline float pow(float x, float y) {
		return powf(x, y);
	}

	static inline long double pow(long double x, long double y) {
		return powl(x, y);
	}

	static inline bool isnan(float value) {
		return __builtin_isnanf(value);
	}

	static inline bool isnan(double value) {
		return __builtin_isnan(value);
	}

	static inline bool isnan(long double value) {
		return __builtin_isnanl(value);
	}

	static inline int signbit(float value) {
		return __builtin_signbitf(value);
	}

	static inline int signbit(double value) {
		return __builtin_signbit(value);
	}

	static inline int signbit(long double value) {
		return __builtin_signbitl(value);
	}

	static inline double max(double x, int y) {
		double _y = (double) y;

		if (_y > x) {
			return _y;
		}

		return x;
	}

	using ::sqrt;

	static inline int fpclassify(float x) {
		return __builtin_fpclassify(FP_NAN, FP_INFINITE, FP_NORMAL,
			FP_SUBNORMAL, FP_ZERO, x);
	}

} // namespace std

#endif /* CMATH_ */
