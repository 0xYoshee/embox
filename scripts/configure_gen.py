#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Monitor configurator:
# === Code-Generator ===
# date: 11.07.09
# author: sikmir
# requirement: python >= 2.6

from misc import *
import string, re, os

class configure_gen:
	def __init__(self, core_obj):
    		self.core = core_obj
		self.tabs = core_obj.tabs
		self.menu = core_obj.menu
		self.var  = core_obj.var

    	def build_commands(self, shell_file, users_file):
    		""" Generate users.inc and shell.inc """
    	        mod_name = 'Users'
    	        #-- generate src/conio/shell.inc
    	        with open(shell_file, 'w+') as fshell:
    	                fshell.write('//Don\'t edit! {0}, : auto-generated by configure.py\n\n'.format(shell_file))
    	                for cmd in self.tabs[mod_name].keys():
    	                        inc    = self.tabs[mod_name][cmd]["inc"]
    	                        status = self.tabs[mod_name][cmd]["status"]
    	                        desc   = self.tabs[mod_name][cmd]["desc"]
    	                        if inc == True and status == True:
    	                                fshell.write('{"%s", "%s", %s_shell_handler},\n' % (cmd, desc, cmd))
    	                fshell.write('{" ", " ", NULL}\n')
    	        fshell.close()
    	        #-- generate src/conio/tests.inc
    	        with open(users_file, 'w+') as fuser_include:
    	                fuser_include.write('//Don\'t edit! {0},: auto-generated by configure.py\n\n'.format(users_file))
    	                for cmd in self.tabs[mod_name].keys():
    	                        inc    = self.tabs[mod_name][cmd]["inc"]
    	                        status = self.tabs[mod_name][cmd]["status"]
    	                        if inc == True and status == True:
    	                    		# TODO: temporary hack
    	    	            		if cmd != "arp":
    	                            		fuser_include.write("#include \"{0}.h\"\n".format(cmd))
    	                    		else:
    	                            		fuser_include.write("#include \"{0}c.h\"\n".format(cmd))
    	        fuser_include.close()

	def build_link(self, files):
		""" Edit link scripts """
	        for file in files:
	                content = read_file('scripts/' + file)
	                content = re.sub('OUTPUT_ARCH\((\w+)\)', "OUTPUT_ARCH({0})".format(self.core.get_arch()), content)
	                write_file('scripts/' + file, content)
	        os.remove("include/asm")
	        os.symlink("asm-{0}".format(self.core.get_arch()), "include/asm")

	def write_autoconf(self, file):
		""" Generate autoconf """
	        #-- read autoconf
	        content = read_file(file)
		#-- Arch ------------------------------------------------------------------------
	        mod_name = "Arch"
	        for item in ("sparc",):
	                mdef    = self.tabs[mod_name][item]["mdef"]
	                inc     = (self.tabs[mod_name][item]["num"] == self.var[mod_name]["Arch_num"].get())
	                content = replacer( mdef, inc, content)
	        #-- Compiler, CFLAGS, LDFLAGS
	        arch = self.core.get_arch()
	        for item in ("Compiler", "Cflags", "Ldflags"):
	    		mdef = self.tabs[mod_name][arch][item]["mdef"]
	    		reg  = self.tabs[mod_name][arch][item]["re"]
	    		content = re.sub( mdef + '=' + reg, mdef + "=" + self.var[mod_name][item].get(), content)
		#-- Common ---------------------------------------------------------------------
                mod_name = "Common"
                mdef     = self.tabs[mod_name]["Target"]["mdef"]
                reg      = self.tabs[mod_name]["Target"]["re"]
                content  = re.sub(mdef + '=' + reg, mdef + "=" + self.var[mod_name]["Target"].get(), content)
		#-- Sign checksum, Disassemble
                for item in ["Sign_bin", "Disassemble"]:
                        mdef    = self.tabs[mod_name][item]["mdef"]
                        inc     = (self.var[mod_name][item].get() == 1)
                        content = replacer(mdef, inc, content)
                #-- Subframes enable
                for item in self.menu.keys():
            		if self.menu[item] == 1:
            			mdef    = self.tabs[mod_name][item]["mdef"]
            			inc     = (self.var[mod_name][item].get() == 1)
            			content = replacer(mdef, inc, content)
        	#-- Subframes --------------------------------------------------------------------
		for mod_name in self.menu:
        	        if not mod_name in ("Common", "Arch", "Conio"):
        	                for item in self.tabs[mod_name].keys():
        	                        inc     = self.tabs[mod_name][item]["inc"]
        	                        mdef    = self.tabs[mod_name][item]["mdef"]
        	                        content = replacer(mdef, inc, content)
                #-- write autoconf
                write_file(file, content)

	def write_autoconf_h(self, file):
		""" Generate autoconf.h """
		#-- read conf_h
		content = read_file(file)
		#-- Arch ------------------------------------------------------------------------
		mod_name = "Arch"
		for item in ("sparc",):
			mdef    = self.tabs[mod_name][item]['mdef']
			inc     = (self.tabs[mod_name][item]["num"] == self.var[mod_name]["Arch_num"].get())
			content = replacer_h(mdef, inc, content)
		#-- Conio ----------------------------------------------------------------------
		mod_name = "Conio"
		for item in ["Prompt"]:#, "Start_msg"]:
			mdef = self.tabs[mod_name][item]["mdef"]
			re   = self.tabs[mod_name][item]["re"]
			content = replacer_value(mdef, re, '"{0}"'.format(self.var[mod_name][item].get()), content)
		item = "Prompt_max_lenght"
		mdef = self.tabs[mod_name][item]["mdef"]
		re   = self.tabs[mod_name][item]["re"]
		content = replacer_value(mdef, re, self.var[mod_name][item].get(), content)
		#-- Common ---------------------------------------------------------------------
		mod_name = "Common"
		for item in self.menu.keys():
			if self.menu[item] == 1:
				mdef    = self.tabs[mod_name][item]["mdef"]
				inc     = (self.var[mod_name][item].get() == 1)
				content = replacer_h(mdef, inc, content)
		#-- Subframes ------------------------------------------------------------------
		for mod_name in self.menu:
			if not mod_name in ("Common", "Arch", "Conio"):
				for item in self.tabs[mod_name].keys():
					inc     = self.tabs[mod_name][item]["inc"]
					mdef    = self.tabs[mod_name][item]["mdef"]
					content = replacer_h(mdef, inc, content)
		#-- write conf_h
		write_file(file, content)
