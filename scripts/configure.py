#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Monitor configurator
# date: 19.05.09
# author: sikmir
# requirement: python >= 2.6

from misc import *
from configure_gui import *
import sys, string, os, traceback, re, json, shutil, getopt

class configure:
	def __init__(self, mode="x"):
		self.mode = mode
		self.files = None
		self.menu = ("Common", "Drivers", "Tests", "Commands", "Levels", "Build", "Net")
		self.tabs = { "0" : 0 }
		self.var = dict([('Common', { "0" : 0 }), ('Arch', { "0" : 0 }), \
				 ('Levels', { "0" : 0 }), ('Build', { "0" : 0 }), \
				 ('Commands', None ), ('Tests', None ), ('Drivers', None ), ('Net', None )])
		self.linkers = None

	def read_config(self, fileconf):
		""" Read config file """
    		config = read_file(fileconf)
    		json_conf = json.loads(config)
    		self.files = json_conf['Files']
    		self.linkers = json_conf['Linkers']
    		self.archs = json_conf['Arch']
    		self.tabs["Title"] = json_conf["Title"]
    		for tab in self.menu:
    			self.tabs[tab] = json_conf[tab]

	def write_config(self, fileconf):
		""" Write config file """
		tmp = dict([('Menu', self.menu), ('Files', self.files), ('Linkers', self.linkers)])
		tmp["Title"] = self.tabs["Title"]
		for i in range( len(self.menu) ):
			tmp[self.menu[i]] = self.tabs[self.menu[i]]
		#-- Arch
		tmp["Arch"] = self.archs
		tmp["Arch"]["Arch_num"] = self.var['Arch']["Arch_num"].get()
		for item in ("Cflags", "Ldflags", "Compiler"):
			tmp["Arch"][self.get_arch()][item][0] = self.var['Arch'][item].get()
    		#-- Common, Levels, Build
    		for mod_name in ("Common", "Levels", "Build"):
    			for item in self.tabs[mod_name].keys():
    				tmp[mod_name][item][0] = self.var[mod_name][item].get()
		write_file(fileconf, json.dumps(tmp, sort_keys=True, indent=4))

	def reload_config(self):
    		""" Reload config """
		self.read_config(".config.default")
    		for item in self.tabs["Common"].keys():
            		self.var["Common"][item].set(self.tabs["Common"][item][0])
            	self.var['Arch']["Arch_num"].set(self.archs["Arch_num"])
            	for item in ("Cflags", "Ldflags", "Compiler"):
            		self.var['Arch'][item].set(self.archs[self.get_arch()][item][0])
    		for i in range( len(self.tabs["Levels"].keys()) ):
            		name = str(self.tabs["Levels"].keys()[i])
            		self.var["Levels"][name].set(self.tabs["Levels"][name][0])
    		for i in range( len(self.tabs["Build"].keys()) ):
            		name = str(self.tabs["Build"].keys()[i])
            		self.var["Build"][name].set(self.tabs["Build"][name][0])
    		#-- Drivers
    		mod_name = "Drivers"
    		for item in self.tabs[mod_name].keys():
    			for driver in self.tabs[mod_name][item].keys():
    				inc = self.tabs[mod_name][item][driver][0]
            			getattr(self.var[mod_name], driver).set(inc)
    		#-- Tests, Users, Net
    		for mod_name in ("Tests", "Commands", "Net"):
    			for item in self.tabs[mod_name].keys():
    				inc = self.tabs[mod_name][item][0]
            			getattr(self.var[mod_name], item).set(inc)

	def get_arch(self):
		if self.var['Arch']["Arch_num"].get() == 0:
			return "sparc"

	def make_conf(self):
		self.build_commands()
		self.build_tests()
		if self.mode == "x":
			self.write_conf_h()
			self.build_link()
			self.write_autoconf(self.files["autoconf"])
			self.write_config(".config")

	def make_def_conf(self):
    		self.build_commands()
    		self.build_tests()
    		if self.mode == "x":
            		self.write_conf_h()
            		self.build_link()
            		self.write_autoconf(self.files["autoconf"] + ".default")
            		self.write_config(".config.default")

	def build_link(self):
		for file in self.linkers:
			content = read_file('scripts/' + file)
			content = re.sub('OUTPUT_ARCH\((\w+)\)', "OUTPUT_ARCH(%s)" % self.get_arch(), content)
			write_file('scripts/' + file, content)

	def build_commands(self):
		mod_name = 'Commands'
		#-- generate src/conio/shell.inc
		with open(self.files["shell_inc"], 'w+') as fshell:
			fshell.write("".join(["//Don't edit! ", self.files["shell_inc"], ": auto-generated by configure.py\n\n"]))
			for cmd in self.tabs[mod_name].keys():
				inc = self.tabs[mod_name][cmd][0]
				desc = self.tabs[mod_name][cmd][2]
				if inc == True:
					fshell.write("{\"" + cmd + "\", \"" + desc + "\", " + cmd + "_shell_handler},\n")
			fshell.write("{\" \", \" \", NULL}\n")
		fshell.close()
		#-- generate src/conio/tests.inc
		with open(self.files["users_inc"], 'w+') as fuser_include:
			fuser_include.write("".join(["//Don't edit! ", self.files["users_inc"], ": auto-generated by configure.py\n\n"]))
			for cmd in self.tabs[mod_name].keys():
				inc = self.tabs[mod_name][cmd][0]
				if inc == True:
					# TODO: temporary hack
					if cmd != "arp":
						fuser_include.write("#include \"" + cmd + ".h\"\n")
					else:
						fuser_include.write("#include \"" + cmd + "c.h\"\n")
		fuser_include.close()

	def repl_all(self, m):
		repl = "ALL_TARGETS="
		for item in self.tabs["Build"].keys():
			if self.var["Build"][item].get() == 1:
				repl += "%s " % self.tabs["Build"][item][2]
		return repl

	def repl_cflag(self, m):
		repl = "CCFLAGS=" + self.var['Arch']["Cflags"].get()
		for item in ("Leon3", "Test_system"):
			if self.var["Levels"][item].get() == 1:
				repl += " -D" + self.tabs["Levels"][item][1]
		return repl

	def build_tests(self):
		#-- generate src/tests/tests_table.inc
		mod_name = 'Tests'
		with open(self.files["tests_table_inc"], 'w+') as ftest:
			ftest.write("".join(["//Don't edit! ", self.files["tests_table_inc"], ": auto-generated by configure.py\n\n"]))
			for test_name in self.tabs[mod_name].keys():
				inc = self.tabs[mod_name][test_name][0]
				desc = self.tabs[mod_name][test_name][2]
				if inc == True:
					ftest.write("{\"" + desc + "\", " + test_name + "},\n")
			ftest.write("{\"empty\", NULL}\n")
		ftest.close()

	def write_autoconf(self, file):
		#-- read autoconf
		content = read_file(file)
    		#-- Arch
    		for ar in ("sparc",):
			content = replacer( self.archs[ar]["mdef"], self.archs[ar]["num"] == self.var['Arch']["Arch_num"].get(), content)
    		#-- Tests, Users, Net
    		for mod_name in ("Tests", "Commands", "Net"):
    			for item in self.tabs[mod_name].keys():
    				inc = self.tabs[mod_name][item][0]
    				mdef = self.tabs[mod_name][item][3]
    				content = replacer(mdef, inc, content)
    		#-- Drivers
    		mod_name = "Drivers"
    		for item in self.tabs[mod_name].keys():
            		for driver in self.tabs[mod_name][item].keys():
            			inc = self.tabs[mod_name][item][driver][0]
            			mdef = self.tabs[mod_name][item][driver][3]
				content = replacer(mdef, inc, content)
		#-- Target
		content = re.sub(self.tabs["Common"]["Target"][1] + '=(\w+)', \
				 self.tabs["Common"]["Target"][1] + "=" + self.var["Common"]["Target"].get(), content)
		#-- Compiler
		content = re.sub( self.archs[self.get_arch()]["Compiler"][1] + '=(\w+(-\w+)?)', \
				  self.archs[self.get_arch()]["Compiler"][1] + "=" + self.var['Arch']["Compiler"].get(), content)
		#-- CFLAGS
		content = re.sub( self.archs[self.get_arch()]["Cflags"][1] + '=([A-Za-z0-9_\-# ]+)', self.repl_cflag, content)
		#-- LDFLAGS
		content = re.sub( self.archs[self.get_arch()]["Ldflags"][1] + '=([A-Za-z0-9_\-# ]+)', \
				  self.archs[self.get_arch()]["Ldflags"][1] + "=" + self.var['Arch']["Ldflags"].get(), content)
		#-- All targets
		content = re.sub('ALL_TARGETS=([a-z ]+)', self.repl_all, content)
		#-- Sign checksum, Disassemble
		for item in ("Sign_bin", "Disassemble"):
			content = replacer(self.tabs["Common"][item][1], self.var["Common"][item].get() == 1, content)
		#-- Simulation, Debug, Release
		for name in self.tabs[self.menu[5]].keys():
			content = replacer(self.tabs[self.menu[5]][name][1], self.var["Build"][name].get() == 1, content)
		#-- write autoconf
		write_file(file, content)

	def write_conf_h(self):
    		#-- read conf_h
		content = read_file(self.files["conf_h"])
    		for name in self.tabs["Levels"].keys():
			content = replacer_h(self.tabs["Levels"][name][1], self.var["Levels"][name].get() == 1, content)
		for ar in ("sparc",):
			content = replacer_h(self.archs[ar]['mdef'], self.archs[ar]["num"] == self.var['Arch']["Arch_num"].get(), content)
		content = re.sub('#define PROMPT "([a-zA-Z0-9._ ->#@<]+)"', '#define PROMPT "%s"' % \
								    self.var["Common"]["Prompt"].get(), content)
#		content = re.sub('#define START_MSG "([\\a-zA-Z0-9._ ->]+)"', "#define START_MSG \"\\n%s\"" % var["Common"]["Start_msg"].get(), content)
    		#-- Simulation, Debug, Release
    		mod_name = "Build"
    		for name in self.tabs[mod_name].keys():
			content = replacer_h(self.tabs[mod_name][name][1], \
					     self.var[mod_name][name].get() == 1, content)
		#-- Tests, Users, Net
		for mod_name in ("Tests", "Commands", "Net"):
    			for item in self.tabs[mod_name].keys():
    				inc = self.tabs[mod_name][item][0]
    				mdef = self.tabs[mod_name][item][3]
            			content = replacer_h(mdef, inc, content)
    		#-- Drivers
    		mod_name = "Drivers"
    		for item in self.tabs[mod_name].keys():
            		for driver in self.tabs[mod_name][item].keys():
            			inc = self.tabs[mod_name][item][driver][0]
            			mdef = self.tabs[mod_name][item][driver][3]
            			#-- TODO: temporary hack o_O
				if mdef != "MONITOR_DRIVERS_GAISLER":
                    			content = replacer_h(mdef, inc, content)
		#-- write conf_h
		write_file(self.files["conf_h"], content)

	def restore_config(self):
	        if not os.path.exists(".config"):
	    		shutil.copyfile(".config.default", ".config")
	        self.read_config(".config")
	        shutil.copyfile(".config", ".config.old")
	        shutil.copyfile(self.files["autoconf"] + ".default", self.files["autoconf"])

	def main(self):
		if self.mode == "x":
			gui = configure_gui(self)
			#-- Common frame
			gui.show_common(self.tabs['Title'])
			#-- Drivers frame
			gui.show_drivers("Drivers")
			#-- Tests frame
			gui.show_table("Tests", "Tests")
			#-- Commands frame
			gui.show_table("Commands", "Commands")
			#-- Level frame
			gui.show_list("Levels", "Verbous level")
			#-- Build frame
			gui.show_list("Build", "Build")
			#-- Net frame
			gui.show_table("Net", "Network")
			#-- main loop
			gui.main()
		elif obj.mode == "menu":
			self.make_conf()
		else:
		        print "Unknown mode"

if __name__=='__main__':
	try:
		opts, args = getopt.getopt(sys.argv[1:], "hm:", ["help", "mode="])
		for o, a in opts:
		        if o in ("-h", "--help"):
		                print "Usage: configure.py [-m <mode>] [-h]\n"
		                sys.exit()
		        elif o in ("-m", "--mode"):
		                mode = a
		        else:
		    		assert False, "unhandled option"
		obj = configure(mode)
		obj.restore_config()
    		obj.main()
	except:
    		traceback.print_exc()
