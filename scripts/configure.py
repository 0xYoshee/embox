#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Monitor configurator
# date: 19.05.09
# author: sikmir
# requirement: python >= 2.6

from misc import *
from configure_gui import *
import sys, string, os, traceback, re, json, shutil, getopt

class configure:
	def __init__(self, mode="x"):
		self.mode = mode
		self.files = None
		self.menu = ("Common", "Drivers", "Tests", "Users", "Levels", "Build", "Net")
		self.tabs = { "0" : 0 }
		self.var = dict([('Common', { "0" : 0 } ), ('Arch',  { "0" : 0 } ), \
				 ('Levels', { "0" : 0 } ), ('Build', { "0" : 0 } ), \
				 ('Users',  { "0" : 0 } ), ('Tests', { "0" : 0 } ), \
				 ('Drivers',{ "0" : 0 } ), ('Net',   { "0" : 0 } )])
		self.linkers = None

	def read_config(self, fileconf):
		""" Read config file """
    		config = read_file(fileconf)
    		json_conf = json.loads(config)
    		self.files = json_conf['Files']
    		self.linkers = json_conf['Linkers']
    		self.archs = json_conf['Arch']
    		for tab in self.menu:
    			self.tabs[tab] = json_conf[tab]

	def write_config(self, fileconf):
		""" Write config file """
		tmp = dict([('Files', self.files), ('Linkers', self.linkers)])
		for item in sorted(self.menu):
			tmp[item] = self.tabs[item]
		#-- Arch
		tmp["Arch"] = self.archs
		tmp["Arch"]["Arch_num"] = self.var['Arch']["Arch_num"].get()
		for item in ("Cflags", "Ldflags", "Compiler"):
			arch = self.get_arch()
			tmp["Arch"][arch][item]["inc"] = self.var['Arch'][item].get()
    		#-- Common, Levels, Build
    		for mod_name in ("Common", "Levels", "Build"):
    			for item in self.tabs[mod_name].keys():
    				tmp[mod_name][item]["inc"] = self.var[mod_name][item].get()
		write_file(fileconf, json.dumps(tmp, sort_keys=True, indent=4))

	def reload_config(self):
    		""" Reload config """
		self.read_config(".config.default")
            	self.var['Arch']["Arch_num"].set(self.archs["Arch_num"])
            	for item in ("Cflags", "Ldflags", "Compiler"):
            		arch = self.get_arch()
            		inc = self.archs[arch][item]["inc"]
            		self.var['Arch'][item].set(inc)
    		#-- Common, Build, Levels, Tests, Users, Net, Drivers
    		for mod_name in self.menu:
    			for item in self.tabs[mod_name].keys():
    				inc = self.tabs[mod_name][item]["inc"]
            			self.var[mod_name][item].set(inc)

	def get_arch(self):
		if self.var['Arch']["Arch_num"].get() == 0:
			return "sparc"

	def make_conf(self):
		self.build_commands()
		if self.mode == "x":
			self.write_conf_h()
			self.build_link()
			self.write_autoconf(self.files["autoconf"])
			self.write_config(".config")

	def make_def_conf(self):
    		self.build_commands()
    		if self.mode == "x":
            		self.write_conf_h()
            		self.build_link()
            		self.write_autoconf(self.files["autoconf"] + ".default")
            		self.write_config(".config.default")

	def build_link(self):
		for file in self.linkers:
			content = read_file('scripts/' + file)
			content = re.sub('OUTPUT_ARCH\((\w+)\)', "OUTPUT_ARCH({0})".format(self.get_arch()), content)
			write_file('scripts/' + file, content)

	def build_commands(self):
		mod_name = 'Users'
		#-- generate src/conio/shell.inc
		with open(self.files["shell_inc"], 'w+') as fshell:
			fshell.write("".join(["//Don't edit! ", self.files["shell_inc"], ": auto-generated by configure.py\n\n"]))
			for cmd in self.tabs[mod_name].keys():
				inc = self.tabs[mod_name][cmd]["inc"]
				status = self.tabs[mod_name][cmd]["status"]
				desc = self.tabs[mod_name][cmd]["desc"]
				if inc == True and status == True:
					fshell.write('{"%s", "%s", %s_shell_handler},\n' % (cmd, desc, cmd))
			fshell.write('{" ", " ", NULL}\n')
		fshell.close()
		#-- generate src/conio/tests.inc
		with open(self.files["users_inc"], 'w+') as fuser_include:
			fuser_include.write("".join(["//Don't edit! ", self.files["users_inc"], ": auto-generated by configure.py\n\n"]))
			for cmd in self.tabs[mod_name].keys():
				inc = self.tabs[mod_name][cmd]["inc"]
				status = self.tabs[mod_name][cmd]["status"]
				if inc == True and status == True:
					# TODO: temporary hack
					if cmd != "arp":
						fuser_include.write("#include \"{0}.h\"\n".format(cmd))
					else:
						fuser_include.write("#include \"{0}c.h\"\n".format(cmd))
		fuser_include.close()

	def write_autoconf(self, file):
		#-- read autoconf
		content = read_file(file)
    		#-- Arch
    		for ar in ("sparc",):
			content = replacer( self.archs[ar]["mdef"], self.archs[ar]["num"] == self.var['Arch']["Arch_num"].get(), content)
    		#-- Tests, Users, Net, Drivers, Build
    		for mod_name in ("Tests", "Users", "Net", "Drivers", "Build"):
    			for item in self.tabs[mod_name].keys():
    				inc = self.tabs[mod_name][item]["inc"]
    				mdef = self.tabs[mod_name][item]["mdef"]
    				content = replacer(mdef, inc, content)
		#-- Target
		arch = self.get_arch()
		content = re.sub(self.tabs["Common"]["Target"]["mdef"] + '=' + self.tabs["Common"]["Target"]["re"], \
				 self.tabs["Common"]["Target"]["mdef"] + "=" + self.var["Common"]["Target"].get(), content)
		#-- Compiler, CFLAGS, LDFLAGS
		for item in ("Compiler", "Cflags", "Ldflags"):
			content = re.sub( self.archs[arch][item]["mdef"] + '=' + self.archs[arch][item]["re"], \
					  self.archs[arch][item]["mdef"] + "=" + self.var['Arch'][item].get(), content)
		#-- Sign checksum, Disassemble, ...
		for item in ("Sign_bin", "Disassemble", "Tests", "Drivers", "Users", "Fs", "Conio", "Net"):
			content = replacer(self.tabs["Common"][item]["mdef"], self.var["Common"][item].get() == 1, content)
		#-- write autoconf
		write_file(file, content)

	def write_conf_h(self):
    		#-- read conf_h
		content = read_file(self.files["conf_h"])
		#-- Arch
		for ar in ("sparc",):
			content = replacer_h(self.archs[ar]['mdef'], self.archs[ar]["num"] == self.var['Arch']["Arch_num"].get(), content)
		#-- Prompt
		content = re.sub('#define PROMPT "([a-zA-Z0-9._ ->#@<]+)"', '#define PROMPT "%s"' % \
								    self.var["Common"]["Prompt"].get(), content)
#		content = re.sub('#define START_MSG "([\\a-zA-Z0-9._ ->]+)"', "#define START_MSG \"\\n%s\"" % var["Common"]["Start_msg"].get(), content)
		#-- Common
		mod_name = "Common"
		for item in ("Tests", "Drivers", "Users", "Conio", "Fs", "Net"):
			content = replacer_h(self.tabs[mod_name][item]["mdef"], self.var[mod_name][item].get() == 1, content)
    		#-- Tests, Users, Net, Drivers, Levels, Build
    		for mod_name in ("Tests", "Users", "Net", "Drivers", "Build", "Levels"):
    			for item in self.tabs[mod_name].keys():
        			inc = self.tabs[mod_name][item]["inc"]
            			mdef = self.tabs[mod_name][item]["mdef"]
                		content = replacer_h(mdef, inc, content)
		#-- write conf_h
		write_file(self.files["conf_h"], content)

	def config_cmp(self, fconf1, fconf2):
		""" some verification """
		config1, config2 = read_file(fconf1), read_file(fconf2)
		json1, json2 = json.loads(config1), json.loads(config2)
		if not json1.keys().sort() == json2.keys().sort():
			return False
		for item in self.menu:
			if not json1[item].keys().sort() == json2[item].keys().sort():
				return False
		return True

	def restore_config(self):
	        if not os.path.exists(".config"):
	    		shutil.copyfile(".config.default", ".config")
	    	if not os.path.exists("scripts/autoconf"):
	    	       shutil.copyfile("scripts/autoconf.default", "scripts/autoconf")
	    	if not self.config_cmp(".config", ".config.default"):
	    		print ".config and .config.default have sharp distinction, maybe .config is out of date?"
	    		shutil.copyfile(".config.default", ".config")
	    		shutil.copyfile("scripts/autoconf.default", "scripts/autoconf")
	    	self.read_config(".config")
	        shutil.copyfile(".config", ".config.old")

	def main(self):
		if self.mode == "x":
			gui = configure_gui(self)
			#-- Common frame
			gui.show_common("Monitor Configurator")
			#-- Drivers frame
			gui.show_table("Drivers")
			#-- Tests frame
			gui.show_table("Tests")
			#-- Users frame
			gui.show_table("Users")
			#-- Level frame
			gui.show_table("Levels")
			#-- Build frame
			gui.show_list("Build")
			#-- Net frame
			gui.show_table("Net")
			#-- main loop
			gui.main()
		elif obj.mode == "menu":
			self.make_conf()
		else:
		        print "Unknown mode"

if __name__=='__main__':
	try:
		opts, args = getopt.getopt(sys.argv[1:], "hm:", ["help", "mode="])
		for o, a in opts:
		        if o in ("-h", "--help"):
		                print "Usage: configure.py [-m <mode>] [-h]\n"
		        elif o in ("-m", "--mode"):
		                mode = a
		                obj = configure(mode)
		                obj.restore_config()
		                obj.main()
		        else:
		    		assert False, "unhandled option"
	except:
    		traceback.print_exc()
