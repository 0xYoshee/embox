#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Monitor configurator
# date: 19.05.09
# author: sikmir
# requirement: python >= 2.6

from misc import *
from configure_gui import *
import sys, string, os, traceback, re, json, shutil, getopt

class configure:
	def __init__(self, mode="x"):
		self.mode = mode
		self.menu, self.files = ( None, None )
		self.tabs = { "0" : 0 }
		self.build_var = { "0": 0 }
		self.level_var = { "0" : 0 }
		self.common_var = { "0": 0 }
		self.varc, self.vart, self.vard = (None, None, None)
		self.common_items = ("Compiler", "Target", "Cflags", "Ldflags", "Arch_num", \
		                     "Sign_bin", "Disassemble", "Prompt", "Start_msg")
		self.linkers = None

	def read_config(self, fileconf):
		""" Read config file """
    		config = read_file(fileconf)
    		json_conf = json.loads(config)
    		self.menu = json_conf['Menu']
    		self.files = json_conf['Files']
    		self.linkers = json_conf['Linkers']
    		for tab in self.menu:
    			self.tabs[str(tab)] = json_conf[str(tab)]

	def write_config(self, fileconf):
		""" Write config file """
		tmp = dict([('Menu', self.menu), ('Files', self.files), ('Linkers', self.linkers)])
		for i in range( len(self.menu) ):
			tmp[self.menu[i]] = self.tabs[self.menu[i]]
    		#-- Common
    		for item in self.common_items:
    			tmp["Common"][item][0] = self.common_var[item].get()
    		#-- Levels
		for item in self.tabs[self.menu[4]].keys():
			tmp["Levels"][item][0] = self.level_var[item].get()
    		#-- Build
		for item in self.tabs[self.menu[5]].keys():
			tmp["Build"][item][0] = self.build_var[item].get()
		write_file(fileconf, json.dumps(tmp))

	def reload_config(self):
    		""" Reload config """
		self.read_config(".config.default")
    		for item in self.common_items:
            		self.common_var[item].set(self.tabs["Common"][item][0])
    		for i in range( len(self.tabs[self.menu[4]].keys()) ):
            		name = str(self.tabs[self.menu[4]].keys()[i])
            		self.level_var[name].set(self.tabs[self.menu[4]][name][0])
    		for i in range( len(self.tabs[self.menu[5]].keys()) ):
            		name = str(self.tabs[self.menu[5]].keys()[i])
            		self.build_var[name].set(self.tabs[self.menu[5]][name][0])
    		#-- Drivers
    		for item in self.tabs[self.menu[1]].keys():
    			for driver, inc, status, desc, mdef in self.tabs[self.menu[1]][item]:
            			getattr(self.vard, driver).set(inc)
    		#-- Tests
    		for test_name, inc, status, desc, mdef in self.tabs[self.menu[2]]:
            		getattr(self.vart, test_name).set(inc)
    		#-- Users
    		for cmd, inc, status, desc, mdef in self.tabs[self.menu[3]]:
            		getattr(self.varc, cmd).set(inc)

	def onPress_dep(self, item, i, j):
		onPress(self.tabs[self.menu[1]][item], i, j)
		if item == "common":
			if self.tabs[self.menu[1]][item][i][0] == "gaisler":
				for k in range( len(self.tabs[self.menu[1]]["gaisler"]) ):
					onPress(self.tabs[self.menu[1]]["gaisler"], k, 1)
					getattr(self.vard, self.tabs[self.menu[1]]["gaisler"][k][0]).set(self.tabs[self.menu[1]]["gaisler"][k][1])

	def make_conf(self):
		self.build_commands()
		self.build_tests()
		if self.mode == "x":
			self.write_conf_h()
			self.build_link()
			self.write_autoconf(self.files["autoconf"])
			self.write_config(".config")

	def make_def_conf(self):
    		self.build_commands()
    		self.build_tests()
    		if self.mode == "x":
            		self.write_conf_h()
            		self.build_link()
            		self.write_autoconf(files["autoconf"] + ".default")
            		self.write_config(".config.default")

	def repl_arch(self, m):
		if self.common_var["Arch_num"].get() == 0:
			return "OUTPUT_ARCH(sparc)"

	def build_link(self):
		for file in self.linkers:
			content = read_file('scripts/' + file)
			content = re.sub('OUTPUT_ARCH\((\w+)\)', self.repl_arch, content)
			write_file('scripts/' + file, content)

	def build_commands(self):
		#-- generate src/conio/shell.inc
		with open(self.files["shell_inc"], 'w+') as fshell:
			fshell.write("".join(["//Don't edit! ", self.files["shell_inc"], ": auto-generated by configure.py\n\n"]))
			for test, inc, status, desc, mdef in self.tabs['Commands']:
				if inc == True:
					if test != "wmem":
						fshell.write("{\"" + test + "\", \"" + desc + "\", " + test + "_shell_handler},\n")
					else:
						fshell.write("{\"" + test + "\", \"" + desc + "\", " + test + "_shell_handler}\n")
		fshell.close()
		#-- generate src/conio/tests.inc
		with open(self.files["users_inc"], 'w+') as fuser_include:
			fuser_include.write("".join(["//Don't edit! ", self.files["users_inc"], ": auto-generated by configure.py\n\n"]))
			for cmd, inc, status, desc, mdef in self.tabs['Commands']:
				if inc == True:
					if cmd != "arp":
						fuser_include.write("#include \"" + cmd + ".h\"\n")
					else:
						fuser_include.write("#include \"" + cmd + "c.h\"\n")
		fuser_include.close()

	def repl_all(self, m):
		repl = "ALL_TARGETS="
		if self.build_var["Debug"].get() == 1:
			repl += "debug "
		if self.build_var["Release"].get() == 1:
			repl += "release "
		if self.build_var["Simulation"].get() == 1:
			repl += "simulation "
		if self.build_var["Doxygen"].get() == 1:
			repl += "docs "
		return repl

	def repl_cflag(self, m):
		repl = "CCFLAGS=" + self.common_var["Cflags"].get()
		if self.level_var["Leon3"].get() == 1:
			repl += " -DLEON3"
		if self.level_var["Test_system"].get() == 1:
			repl += " -D_TEST_SYSTEM_"
		return repl

	def build_tests(self):
		#-- generate src/tests/tests_table.inc
		with open(self.files["tests_table_inc"], 'w+') as ftest:
			ftest.write("".join(["//Don't edit! ", self.files["tests_table_inc"], ": auto-generated by configure.py\n\n"]))
			for test, inc, status, desc, mdef in self.tabs['Tests']:
				if inc == True:
					ftest.write("{\"" + desc + "\", " + test + "},\n")
			ftest.write("{\"empty\", NULL}\n")
		ftest.close()

	def write_autoconf(self, file):
		#-- read autoconf
		content = read_file(file)
    		#-- Arch
    		for ar, value, mdef in self.tabs['Common']['Arch']:
			content = replacer(mdef, value == self.common_var["Arch_num"].get(), content)
    		#-- Tests
    		for test, inc, status, desc, mdef in self.tabs[self.menu[2]]:
    			content = replacer(mdef, inc, content)
    		#-- Users
    		for cmd, inc, status, desc, mdef in self.tabs[self.menu[3]]:
			content = replacer(mdef, inc, content)
    		#-- Drivers
    		for item in self.tabs[self.menu[1]].keys():
            		for driver, inc, status, desc, mdef in self.tabs[self.menu[1]][item]:
				content = replacer(mdef, inc, content)
		#-- Target
		content = re.sub(self.tabs["Common"]["Target"][1] + '=(\w+)', \
				 self.tabs["Common"]["Target"][1] + "=" + self.common_var["Target"].get(), content)
		#-- Compiler
		content = re.sub( self.tabs["Common"]["Compiler"][1] + '=(\w+(-\w+)?)', \
				  self.tabs["Common"]["Compiler"][1] + "=" + self.common_var["Compiler"].get(), content)
		#-- CFLAGS
		content = re.sub( self.tabs["Common"]["Cflags"][1] + '=([A-Za-z0-9_\-# ]+)', self.repl_cflag, content)
		#-- LDFLAGS
		content = re.sub( self.tabs["Common"]["Ldflags"][1] + '=([A-Za-z0-9_\-# ]+)', \
				  self.tabs["Common"]["Ldflags"][1] + "=" + self.common_var["Ldflags"].get(), content)
		#-- All targets
		content = re.sub('ALL_TARGETS=([a-z ]+)', self.repl_all, content)
		#-- Sign checksum
		content = replacer(self.tabs["Common"]["Sign_bin"][1], self.common_var["Sign_bin"].get() == 1, content)
		#-- Disassemble
		content = replacer(self.tabs["Common"]["Disassemble"][1], self.common_var["Disassemble"].get() == 1, content)
		#-- Simulation, Debug, Release
		for name in self.tabs[self.menu[5]].keys():
			content = replacer(self.tabs[self.menu[5]][name][1], self.build_var[name].get() == 1, content)
		#-- write autoconf
		write_file(file, content)

	def write_conf_h(self):
    		#-- read conf_h
		content = read_file(self.files["conf_h"])
    		for name in self.tabs[self.menu[4]].keys():
			content = replacer_h(self.tabs[self.menu[4]][name][1], self.level_var[name].get() == 1, content)
		for ar, value, mdef in self.tabs['Common']['Arch']:
			content = replacer_h(mdef, value == self.common_var["Arch_num"].get(), content)
		content = re.sub('#define PROMPT "([a-zA-Z0-9._ ->#@<]+)"', '#define PROMPT "%s"' % \
								    self.common_var["Prompt"].get(), content)
#		content = re.sub('#define START_MSG "([\\a-zA-Z0-9._ ->]+)"', "#define START_MSG \"\\n%s\"" % common_var["Start_msg"].get(), content)
    		#-- Simulation, Debug, Release
    		for name in self.tabs[self.menu[5]].keys():
			content = replacer_h(self.tabs[self.menu[5]][name][1], \
					     self.build_var[name].get() == 1, content)
		#-- Tests
    		for test, inc, status, desc, mdef in self.tabs[self.menu[2]]:
            		content = replacer_h(mdef, inc, content)
    		#-- Users
    		for cmd, inc, status, desc, mdef in self.tabs[self.menu[3]]:
            		content = replacer_h(mdef, inc, content)
    		#-- Drivers
    		for item in self.tabs[self.menu[1]].keys():
            		for driver, inc, status, desc, mdef in self.tabs[self.menu[1]][item]:
            			#-- TODO: temporary hack o_O
				if mdef != "MONITOR_DRIVERS_GAISLER":
                    			content = replacer_h(mdef, inc, content)
		#-- write conf_h
		write_file(self.files["conf_h"], content)

	def restore_config(self):
	        if not os.path.exists(".config"):
	    		shutil.copyfile(".config.default", ".config")
	        self.read_config(".config")
	        shutil.copyfile(".config", ".config.old")
	        shutil.copyfile("scripts/autoconf.default", "scripts/autoconf")

	def main(self):
		if self.mode == "x":
			gui = configure_gui(self)
			#-- Common frame
			gui.show_common()
			#-- Drivers frame
			gui.show_drivers()
			#-- Tests frame
			gui.show_tests()
			#-- Commands frame
			gui.show_users()
			#-- Level frame
			gui.show_levels()
			#-- Build frame
			gui.show_build()
			#-- main loop
			gui.main()
		elif obj.mode == "menu":
			self.make_conf()
		else:
		        print "Unknown mode"

if __name__=='__main__':
	try:
		opts, args = getopt.getopt(sys.argv[1:], "hm:", ["help", "mode="])
		for o, a in opts:
		        if o in ("-h", "--help"):
		                print "Usage: configure.py [-m <mode>] [-h]\n"
		                sys.exit()
		        elif o in ("-m", "--mode"):
		                mode = a
		        else:
		    		assert False, "unhandled option"
		obj = configure(mode)
		obj.restore_config()
    		obj.main()
	except:
    		traceback.print_exc()
