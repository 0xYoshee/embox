/**
 * @file
 * @brief Dependency injection framework.
 *
 * @date 22.02.2010
 * @author Eldar Abusalimov
 */

#ifndef MOD_H_
#define MOD_H_

/* Defined only when compiling dependency injection model*/
#ifndef __EMBUILD_DEPSINJECT__
# ifndef __EMBUILD_MOD__
#  error "Do not include mod.h without __EMBUILD_MOD__ defined (e.g. from libs)!"
# endif /* __EMBUILD_MOD__ */
#endif /* __EMBUILD__ */

#define MOD_FLAG_ENABLED   (1 << 0)
#define MOD_FLAG_OPFAILED  (1 << 1)

#define __embuild_mod_p(mod) (&__mod__##mod)

#define __embuild_mod_decl(_mod_var) \
	static const struct mod __mod__##_mod_var

/* Needed to compile dependency injection model generated by EMBuild. */
#define __embuild_mod_def(_mod_var, _mod_package, _mod_name, ...) \
	extern mod_op_t __mod_enable__##_mod_var __attribute__ ((weak)); \
	extern mod_op_t __mod_disable__##_mod_var __attribute__ ((weak)); \
	extern void __mod_data__##_mod_var __attribute__ ((weak)); \
	extern const void __mod_rodata__##_mod_var __attribute__ ((weak)); \
	static struct mod_info __mod_info__##_mod_var; \
	static const struct mod __mod__##_mod_var = { \
			.info = &__mod_info__##_mod_var, \
			.enable = &__mod_enable__##_mod_var, \
			.disable = &__mod_disable__##_mod_var, \
			.data = &__mod_data__##_mod_var, \
			.rodata = &__mod_rodata__##_mod_var, \
			.package = _mod_package, \
			.name = _mod_name, \
			.deps = { __VA_ARGS__ } \
		}

#define __embuild_mod_root(_mod_var) \
	static const struct mod *__mod_root__##_mod_var \
		__attribute__ ((used, section(".mods"))) = __embuild_mod_p(_mod_var)

struct mod;
struct mod_info;

/**
 * Enables/disables the module. The semantics of the operation is
 * module-specific. If not specified (@c NULL pointer), the meaning is that
 * module can be enabled/disabled at any time (as if the function always
 * returns 0).
 *
 * @param self pointer to the #mod struct.
 * @return error code
 * @retval 0 if enabling succeeds
 * @retval non-zero on error
 */
typedef int (*mod_op_t)(const struct mod *self);

/**
 * Module info emitted by EMBuild dependency injection model generator.
 */
struct mod {
	/** Contains module flags needed for dependencies resolve. */
	struct mod_info *info;
	/** Module enable operation (if any). */
	mod_op_t *enable;
	/** Module disable operation (if any). */
	mod_op_t *disable;
	/** Volatile module-specific data (if any). */
	void *data;
	/** Invariant module data (if any). */
	const void *rodata;
	/** Module package assigned by EMBuild. */
	const char *package;
	/** Module name assigned by EMBuild. */
	const char *name;
	/** NULL-terminated array of module dependencies. */
	const struct mod *deps[];
};

struct mod_info {
	unsigned int flags;
};

#endif /* MOD_H_ */
